import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        gradlePluginPortal()
        maven {url = 'https://maven.minecraftforge.net/'}
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

version = "2.6.13"
group = "ofdev" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "aa_do_not_rename_OptiFineDevTweaker"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

repositories {
    maven { url = 'https://maven.minecraftforge.net/' }
    mavenCentral()
    maven {
        url "https://libraries.minecraft.net/"
    }
}

configurations {
    shadow
}

dependencies {
    shadow("org.ow2.asm:asm-debug-all:5.2")
    compileOnly('cpw.mods:modlauncher:4.0.+') {
        transitive = false
    }
    compileOnly 'lzma:lzma:0.0.1'
    compileOnly('net.minecraft:launchwrapper:1.12') {
        transitive = false
    }
    // log4j version from 1.7.10, the oldest we support
    compileOnly("org.apache.logging.log4j:log4j-api:2.0-beta9")
}

task shadowJarLW(type: ShadowJar) {
    configurations = [project.configurations.shadow]
    from(sourceSets.main.output) {
        include('ofdev/launchwrapper/**', 'ofdev/common/**')
    }
    relocate('org.objectweb', 'ofdev.launchwrapper.org.objectweb')
    classifier = "launchwrapper"
    manifest {
        attributes([
            "TweakClass": "ofdev.launchwrapper.OptifineDevTweakerWrapper",
            "TweakOrder": "-10000"
        ])
    }
}

task shadowJarML(type: ShadowJar) {

    from sourceSets.main.output
    include('ofdev/modlauncher/**', 'ofdev/common/**')
    classifier = "modlauncher"
    manifest {
        attributes([
            "Specification-Title": "ofdevtweaker",
            "Specification-Vendor": "ofdevtweaker",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"ofdevtweaker",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task shadowJarAll(type: ShadowJar) {
    dependsOn(shadowJarLW)
    from(sourceSets.main.output) {
        include('ofdev/modlauncher/**')
        include('META-INF/**')
    }
    from(shadowJarLW.archivePath.absolutePath) {
        include('*')
    }
    classifier = "all"
    manifest {
        attributes([
                "TweakClass": "ofdev.launchwrapper.OptifineDevTweakerWrapper",
                "TweakOrder": "-10000",
                "Specification-Title": "ofdevtweaker",
                "Specification-Vendor": "ofdevtweaker",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"ofdevtweaker",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task shadowJarAllNoVersionForSymlink(type: ShadowJar) {
    dependsOn(shadowJarLW)
    from(sourceSets.main.output) {
        include('ofdev/modlauncher/**')
        include('META-INF/**')
    }
    from(shadowJarLW.archivePath.absolutePath) {
        include('*')
    }
    version(null)
    classifier = "all"
    manifest {
        attributes([
                "TweakClass": "ofdev.launchwrapper.OptifineDevTweakerWrapper",
                "TweakOrder": "-10000",
                "Specification-Title": "ofdevtweaker",
                "Specification-Vendor": "ofdevtweaker",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"ofdevtweaker",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
build.dependsOn(shadowJarAll, shadowJarML, shadowJarLW, shadowJarAllNoVersionForSymlink)

jar {
    manifest {
        attributes([
                "TweakClass": "ofdev.launchwrapper.OptifineDevTweakerWrapper",
                "TweakOrder": "-10000",
                "Specification-Title": "ofdevtweaker",
                "Specification-Vendor": "ofdevtweaker",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"ofdevtweaker",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
